//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Nov 15 2013 15:37:37).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#import "NSObject.h"

#import "SBDashBoardExternalEventHandling.h"
#import "SBPocketStateMonitorObserver.h"

@class NSMutableSet, NSString, NSTimer, SBIdleTimerDefaults;

@interface SBBacklightController : NSObject <SBPocketStateMonitorObserver, SBDashBoardExternalEventHandling>
{
    SBIdleTimerDefaults *_idleTimerDefaults;
    int _lastBKUserEventTimerMode;
    double _minimumLockIdleTime;
    NSTimer *_autoLockTimer;
    double _lastTimeIdleCausedDim;
    double _nextLockDurationAfterDim;
    unsigned int _disableAutoDimming:1;
    NSMutableSet *_idleTimerDisabledReasons;
    _Bool _isPendingScreenUnblankAfterCACommit;
    _Bool _undimmedForBulletinSinceLastUserEvent;
    _Bool _allowIdleTimerToBeReset;
    _Bool _useDashBoard;
}

+ (id)sharedInstanceIfExists;
+ (id)sharedInstance;
+ (id)_sharedInstanceCreateIfNeeded:(_Bool)arg1;
@property(readonly, nonatomic) _Bool isPendingScreenUnblankAfterCACommit; // @synthesize isPendingScreenUnblankAfterCACommit=_isPendingScreenUnblankAfterCACommit;
- (void).cxx_destruct;
- (double)defaultLockScreenDimIntervalWhenNotificationsPresent;
- (double)defaultLockScreenDimInterval;
- (void)_resetLockScreenIdleTimerWithDuration:(double)arg1 mode:(int)arg2;
- (_Bool)_lockScreenWantsUserEventNotifications;
- (double)_currentLockScreenIdleTimerInterval;
- (void)_sendResetIdleTimerAction;
- (void)resetLockScreenIdleTimerWithDuration:(double)arg1;
- (void)resetLockScreenIdleTimer;
- (void)cancelLockScreenIdleTimer;
- (_Bool)handleEvent:(id)arg1;
- (_Bool)wouldHandleButtonEvent:(id)arg1;
@property(readonly, nonatomic) long long participantState;
@property(readonly, copy, nonatomic) NSString *dashBoardIdentifier;
- (void)pocketStateMonitor:(id)arg1 pocketStateDidChangeFrom:(long long)arg2 to:(long long)arg3;
- (void)preventIdleSleepForNumberOfSeconds:(float)arg1;
- (void)preventIdleSleep;
- (void)allowIdleSleep;
- (void)startFadeOutAnimationFromLockSource:(int)arg1;
- (void)_batterySaverModeDidChange:(id)arg1;
- (void)startAllowingIdleTimer;
- (void)_requestedUserEventNotificationOccurred;
- (void)_userEventPresenceTimerExpired;
- (void)_userEventOccurred;
- (void)_userEventsDidIdle;
- (void)_lockScreenDimTimerFired;
- (void)_didIdle;
- (void)dimForIdleWarning;
- (void)_autoLockTimerFired:(id)arg1;
- (void)_startFadeOutAnimationFromLockSource:(int)arg1;
- (void)reloadDefaults;
- (void)autoLockPrefsChanged;
- (void)_animateBacklightToFactor:(float)arg1 duration:(double)arg2 source:(long long)arg3 silently:(_Bool)arg4 completion:(CDUnknownBlockType)arg5;
- (void)animateBacklightToFactor:(float)arg1 duration:(double)arg2 source:(long long)arg3 completion:(CDUnknownBlockType)arg4;
- (void)setBacklightFactor:(float)arg1 source:(long long)arg2;
- (_Bool)shouldTurnOnScreenForBacklightSource:(long long)arg1;
- (void)setBacklightFactorPending:(float)arg1;
- (id)idleTimerDisabledReasons;
@property(readonly, nonatomic) _Bool screenIsDim;
@property(readonly, nonatomic) _Bool screenIsOn;
- (void)_deferredScreenUnblankDone;
- (void)turnOnScreenFullyWithBacklightSource:(long long)arg1;
- (void)_performDeferredBacklightRampWorkWithInfo:(id)arg1;
- (void)setIdleTimerDisabled:(_Bool)arg1 forReason:(id)arg2;
- (void)adjustIdleLockDuration:(double *)arg1 idleDimDuration:(double *)arg2;
- (void)_setBKEventTimerMode:(int)arg1 withDuration:(float)arg2;
- (void)_resetIdleTimerAndUndim:(_Bool)arg1 source:(long long)arg2;
- (void)resetIdleTimerAndUndimForSource:(long long)arg1;
- (void)resetIdleTimer;
- (void)_undimFromSource:(long long)arg1;
- (double)_nextLockTimeDuration;
- (double)_nextIdleTimeDuration;
- (void)clearIdleTimer;
- (void)restoreBacklightFactorForProx;
- (void)setBacklightFactorToZeroForProx;
- (void)_cancelSetBacklightFactorToZeroAfterDelay;
- (void)_setBacklightFactorToZeroForProx;
- (void)_clearAutoLockTimer;
- (id)init;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

